/**
 * Copyright (c) 2016 iSencia Belgium NV.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Erwin De Ley - initial API and implementation and/or initial documentation
 */
package org.eclipse.triquetrum.workflow.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.triquetrum.workflow.model.util.TriqAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class TriqItemProviderAdapterFactory extends TriqAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public TriqItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.NamedObj} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected NamedObjItemProvider namedObjItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.NamedObj}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createNamedObjAdapter() {
    if (namedObjItemProvider == null) {
      namedObjItemProvider = new NamedObjItemProvider(this);
    }

    return namedObjItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Attribute} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected AttributeItemProvider attributeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Attribute}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAttributeAdapter() {
    if (attributeItemProvider == null) {
      attributeItemProvider = new AttributeItemProvider(this);
    }

    return attributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Annotation} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected AnnotationItemProvider annotationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Annotation}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAnnotationAdapter() {
    if (annotationItemProvider == null) {
      annotationItemProvider = new AnnotationItemProvider(this);
    }

    return annotationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Parameter} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected ParameterItemProvider parameterItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Parameter}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createParameterAdapter() {
    if (parameterItemProvider == null) {
      parameterItemProvider = new ParameterItemProvider(this);
    }

    return parameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Director} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected DirectorItemProvider directorItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Director}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createDirectorAdapter() {
    if (directorItemProvider == null) {
      directorItemProvider = new DirectorItemProvider(this);
    }

    return directorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Entity} instances. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * 
   * @generated
   */
  protected EntityItemProvider entityItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Entity}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createEntityAdapter() {
    if (entityItemProvider == null) {
      entityItemProvider = new EntityItemProvider(this);
    }

    return entityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.CompositeEntity} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected CompositeEntityItemProvider compositeEntityItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.CompositeEntity}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createCompositeEntityAdapter() {
    if (compositeEntityItemProvider == null) {
      compositeEntityItemProvider = new CompositeEntityItemProvider(this);
    }

    return compositeEntityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Actor} instances. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * 
   * @generated
   */
  protected ActorItemProvider actorItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Actor}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createActorAdapter() {
    if (actorItemProvider == null) {
      actorItemProvider = new ActorItemProvider(this);
    }

    return actorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.CompositeActor} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected CompositeActorItemProvider compositeActorItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.CompositeActor}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createCompositeActorAdapter() {
    if (compositeActorItemProvider == null) {
      compositeActorItemProvider = new CompositeActorItemProvider(this);
    }

    return compositeActorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Port} instances. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * 
   * @generated
   */
  protected PortItemProvider portItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Port}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createPortAdapter() {
    if (portItemProvider == null) {
      portItemProvider = new PortItemProvider(this);
    }

    return portItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Relation} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected RelationItemProvider relationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Relation}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createRelationAdapter() {
    if (relationItemProvider == null) {
      relationItemProvider = new RelationItemProvider(this);
    }

    return relationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Location} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected LocationItemProvider locationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Location}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createLocationAdapter() {
    if (locationItemProvider == null) {
      locationItemProvider = new LocationItemProvider(this);
    }

    return locationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.triquetrum.workflow.model.Vertex} instances. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * 
   * @generated
   */
  protected VertexItemProvider vertexItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.triquetrum.workflow.model.Vertex}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createVertexAdapter() {
    if (vertexItemProvider == null) {
      vertexItemProvider = new VertexItemProvider(this);
    }

    return vertexItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public void dispose() {
    if (namedObjItemProvider != null)
      namedObjItemProvider.dispose();
    if (attributeItemProvider != null)
      attributeItemProvider.dispose();
    if (annotationItemProvider != null)
      annotationItemProvider.dispose();
    if (parameterItemProvider != null)
      parameterItemProvider.dispose();
    if (directorItemProvider != null)
      directorItemProvider.dispose();
    if (entityItemProvider != null)
      entityItemProvider.dispose();
    if (compositeEntityItemProvider != null)
      compositeEntityItemProvider.dispose();
    if (actorItemProvider != null)
      actorItemProvider.dispose();
    if (compositeActorItemProvider != null)
      compositeActorItemProvider.dispose();
    if (portItemProvider != null)
      portItemProvider.dispose();
    if (relationItemProvider != null)
      relationItemProvider.dispose();
    if (locationItemProvider != null)
      locationItemProvider.dispose();
    if (vertexItemProvider != null)
      vertexItemProvider.dispose();
  }

}
