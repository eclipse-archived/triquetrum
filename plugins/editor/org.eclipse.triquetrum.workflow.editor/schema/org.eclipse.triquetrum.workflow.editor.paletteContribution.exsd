<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.triquetrum.workflow.editor" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.eclipse.triquetrum.workflow.editor" id="org.eclipse.triquetrum.workflow.editor.paletteContribution" name="Palette contribution"/>
      </appinfo>
      <documentation>
         This extension point must be used to specify entries for the editor&apos;s palette :
- actors
- directors
- attributes
- ...
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="group" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="entry" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="entry">
      <complexType>
         <sequence>
            <element ref="property" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="displayName" type="string">
            <annotation>
               <documentation>
                  This attribute optionally sets the displayed name for a palette entry, as an alternative to the default name of the entry&apos;s underlying implementation class.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Specifies the class implementing the palette entry.

It can be a Java implementation or an actor-oriented implementation.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="ptolemy.kernel.util.NamedObj:"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="type" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="Actor">
                  </enumeration>
                  <enumeration value="Director">
                  </enumeration>
                  <enumeration value="Parameter">
                  </enumeration>
                  <enumeration value="Attribute">
                  </enumeration>
                  <enumeration value="Port">
                  </enumeration>
                  <enumeration value="Annotation">
                  </enumeration>
                  <enumeration value="Vertex">
                  </enumeration>
                  <enumeration value="CompositeActor">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  A plugin relative path to the image to be used as the icon for this palette entry.
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="iconType">
            <annotation>
               <documentation>
                  Identifies the type of the icon definition.
Currently supports 3 types :
1. img (gif,jpg,... files with size 16x16px) : these are shown as small icons on the top-left of a default rounded rectangle for actors, directors etc.
2. svg (svg,xml files) : these should define the complete figure of a model element. The result will be rendered with a width of 100px and a height matching the SVG definition&apos;s aspect ratio.
3. ptolemy : Ptolemy II MOML icon definitions. Similar to SVG they should define the complete figure of a model element. Contrary to SVG, we assume size info to be absolute here.

If unspecified, img is assumed as default.

In the future this may be adapted to allow registering extra types via extensions.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="img">
                  </enumeration>
                  <enumeration value="svg">
                  </enumeration>
                  <enumeration value="ptolemy">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <element name="group">
      <complexType>
         <sequence>
            <element ref="entry" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="group" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="displayName" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  A plugin relative path to the image to be used as the icon for this palette group.
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="priority" type="string">
            <annotation>
               <documentation>
                  A numeric value used to order palette entries from high to low.

When undefined, it is assumed to be 0.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="provider" type="string">
            <annotation>
               <documentation>
                  An optional provider for palette entries in this group.

This can be used to dynamically populate a palette group based on some external resources or other logic.
The obtained entries will be added next to the statically defined entries in plugin.xml files (if any).
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.triquetrum.workflow.editor.palette.PaletteEntryProvider"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="property">
      <annotation>
         <documentation>
            Properties can be used to add extra configuration information to a palette entry.

A sample use case is to set &quot;input&quot; and/or &quot;output&quot; directions on ports in the palette.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
