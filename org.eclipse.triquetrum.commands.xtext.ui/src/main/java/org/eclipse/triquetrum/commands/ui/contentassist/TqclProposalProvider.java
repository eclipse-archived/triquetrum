/*******************************************************************************
 * Copyright (c)  2017 Totaro Rodolfo
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *    Rodolfo Totaro - initial API and implementation and/or initial documentation
 *******************************************************************************/
/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.triquetrum.commands.ui.contentassist;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.triquetrum.commands.api.TqCLServices;
import org.eclipse.triquetrum.commands.api.services.ActorDescriptor;
import org.eclipse.triquetrum.commands.api.services.DirectorDescriptor;
import org.eclipse.triquetrum.commands.api.services.EntityDescriptor;
import org.eclipse.triquetrum.commands.api.services.ParameterDescriptor;
import org.eclipse.triquetrum.commands.api.services.PortDescriptor;
import org.eclipse.triquetrum.commands.api.services.TqCLLibraryException;
import org.eclipse.triquetrum.commands.api.services.TqCLLibraryProvider;
import org.eclipse.triquetrum.commands.tqcl.Category;
import org.eclipse.triquetrum.commands.tqcl.Command;
import org.eclipse.triquetrum.commands.tqcl.CompositeCommand;
import org.eclipse.triquetrum.commands.tqcl.Connect;
import org.eclipse.triquetrum.commands.tqcl.ConnectionPort;
import org.eclipse.triquetrum.commands.tqcl.Insert;
import org.eclipse.triquetrum.commands.tqcl.Library;
import org.eclipse.triquetrum.commands.tqcl.Parameter;
import org.eclipse.triquetrum.commands.tqcl.TqclPackage;
import org.eclipse.triquetrum.commands.tqcl.TriquetrumScript;
import org.eclipse.triquetrum.commands.validation.TqCLUtils;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import com.google.common.collect.Collections2;
import com.google.inject.Guice;

/**
 * See
 * https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
public class TqclProposalProvider extends AbstractTqclProposalProvider {

	@Override
	public void completeLibrary_Name(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeLibrary_Name(model, assignment, context, acceptor);
		TqCLLibraryProvider tqclLibraryProvider = TqCLServices.getInstance().getTqclLibraryProvider();
		Set<String> libraryNames = tqclLibraryProvider.getLibraryNames();
		for (String string : libraryNames) {
			ICompletionProposal completionProposal = createCompletionProposal(string, string, null, context);
			acceptor.accept(completionProposal);
		}
	}

	@Override
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void completeInsert_EntityClass(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeInsert_EntityClass(model, assignment, context, acceptor);
		Map<String, EntityDescriptor> entityDescriptorsMap = new HashMap<>();
		if (model instanceof Insert) {
			try {

				Insert insert = (Insert) model;
				EList<Parameter> alreadySetParameters = insert.getParameters();

				List<Library> libraries = EcoreUtil2.getAllContentsOfType(EcoreUtil2.getRootContainer(insert),
						Library.class);

				Category category = insert.getCategory();
				List<? extends EntityDescriptor> descriptors = new ArrayList<>();
				if (libraries == null) {
					return;
				}
				if (insert.getCategory() == null) {
					category = Category.ACTOR;
				}
				TqCLLibraryProvider tcqlLibraryProvider = TqCLServices.getInstance().getTqclLibraryProvider();
				for (Library library : libraries) {
					switch (category) {
					case ACTOR:
						List<ActorDescriptor> actorDescriptors = tcqlLibraryProvider.getActors(library.getName());
						for (EntityDescriptor actorDescriptor : actorDescriptors) {
							entityDescriptorsMap.put(actorDescriptor.getClazz(), actorDescriptor);
						}
						descriptors.addAll((List) actorDescriptors);
						break;

					case DIRECTOR:
						List<DirectorDescriptor> directors = tcqlLibraryProvider.getDirectors(library.getName());
						for (DirectorDescriptor directorDescriptor : directors) {
							entityDescriptorsMap.put(directorDescriptor.getClazz(), directorDescriptor);
						}
						descriptors.addAll((List) directors);
						break;

					case PARAMETER:
						List<ParameterDescriptor> parameters = tcqlLibraryProvider.getParameterTypes(library.getName());
						for (ParameterDescriptor parameterDescriptor : parameters) {
							entityDescriptorsMap.put(parameterDescriptor.getClazz(), parameterDescriptor);
						}
						descriptors.addAll((List) parameters);
						break;
					case PORT:
						List<PortDescriptor> ports = tcqlLibraryProvider.getPortTypes(library.getName());
						for (PortDescriptor portDescriptor : ports) {
							entityDescriptorsMap.put(portDescriptor.getClazz(), portDescriptor);
						}
						descriptors.addAll((List) ports);
						break;
					default:
						break;
					}
				}

				for (EntityDescriptor key : descriptors) {
					ICompletionProposal completionProposal = createCompletionProposal('<' + key.getClazz() + "> as ",
							key.getClazz(), null, context);
					acceptor.accept(completionProposal);
				}
			} catch (TqCLLibraryException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	@Override
	public void completeInsert_Name(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		if (model instanceof Insert) {
			Insert insert = (Insert) model;
			String qualifiedName = insert.getEntityClass();
			String name = StringUtils.substringAfterLast(qualifiedName, ".");
			name = name.replaceAll("<", "");
			name = name.replaceAll(">", "");
			ICompletionProposal completionProposal = createCompletionProposal('"' + name + '"', name, null, context);
			acceptor.accept(completionProposal);
		}
	}

	@Override
	public void completeConnectionPort_Port(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeConnectionPort_Port(model, assignment, context, acceptor);
		if (model instanceof ConnectionPort) {
			ConnectionPort connectionPort = (ConnectionPort) model;
			Insert actor = connectionPort.getActor();
			boolean input = false;
			boolean output = false;
			if(model.eContainmentFeature().getName().equals(TqclPackage.Literals.CONNECT__FROM.getName()))
			{
				input=false;
				output=true;
			}
			if(model.eContainmentFeature().getName().equals(TqclPackage.Literals.CONNECT__TO.getName()))
			{
				input=true;
				output=false;
			}
			
			List<PortDescriptor> actorPorts = TqCLUtils.getActorInsertPorts(actor,input,output);
			for (PortDescriptor portDescriptor : actorPorts) {
				ICompletionProposal completionProposal = createCompletionProposal(portDescriptor.getDisplayName(),
						context);
				acceptor.accept(completionProposal);
			}

		}

	}

	

	@Override
	public void completeInsert_Parameters(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof Insert) {
			Insert insert = (Insert) model;
			Category category = TqCLUtils.getCategory((Insert) insert);
			String entityClass = insert.getEntityClass();

			try {
				TqCLLibraryProvider tqclLibraryProvider = TqCLServices.getInstance().getTqclLibraryProvider();
				EntityDescriptor entityDescriptor = null;
				switch (category) {
				case ACTOR:
					entityDescriptor = tqclLibraryProvider.getActor(TqCLUtils.cleanEntityName(entityClass));
					break;
				case DIRECTOR:
					entityDescriptor = tqclLibraryProvider.getDirector(TqCLUtils.cleanEntityName(entityClass));
					break;

				case PARAMETER:
					entityDescriptor = tqclLibraryProvider.getParameterType(TqCLUtils.cleanEntityName(entityClass));
					break;
				case PORT:
					entityDescriptor = tqclLibraryProvider.getPortType(TqCLUtils.cleanEntityName(entityClass));
					break;

				default:
					break;
				}

				if (entityDescriptor == null) {
					return;
				}

				List<ParameterDescriptor> parameters = entityDescriptor.getParameters();
				final Collection<String> alreadyParameterSetNames = Collections2.transform(insert.getParameters(),
						new Function<Parameter, String>() {

							@Override
							public String apply(Parameter parameter) {
								if (parameter != null && parameter.getId() != null) {
									return TqCLUtils.cleanParameterName(parameter.getId());
								} else {
									return null;
								}
							}
						});

				Collection<ParameterDescriptor> filteredParameters = Collections2.filter(parameters,
						new Predicate<ParameterDescriptor>() {
							@Override
							public boolean apply(ParameterDescriptor entityDescriptor) {
								return !alreadyParameterSetNames.contains(entityDescriptor.getDisplayName());
							}
						});

				for (ParameterDescriptor parameterDescriptor : filteredParameters) {
					String displayName = parameterDescriptor.getDisplayName();
					String proposal = "";
					if (displayName.contains(" ")) {
						proposal = "\"" + displayName + "\"";
					} else {
						proposal = MessageFormat.format("${0}=\"{1}\"", displayName,
								parameterDescriptor.getDefaultValue());
					}
					String description = displayName + "(default=" + parameterDescriptor.getDefaultValue() + ")";

					ICompletionProposal completionProposal = createCompletionProposal(proposal, description, null,
							context);
					acceptor.accept(completionProposal);
				}
			} catch (TqCLLibraryException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
	}

}
