/*******************************************************************************
 * Copyright (c)  2016 Totaro Rodolfo
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * generated by Xtext 2.10.0	
 *
 * Contributors:
 *    Rodolfo Totaro - initial API and implementation and/or initial documentation
 *******************************************************************************/
grammar InternalTqcl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.triquetrum.commands.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.triquetrum.commands.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.triquetrum.commands.services.TqclGrammarAccess;

}

@parser::members {

 	private TqclGrammarAccess grammarAccess;

    public InternalTqclParser(TokenStream input, TqclGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TriquetrumScript";
   	}

   	@Override
   	protected TqclGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTriquetrumScript
entryRuleTriquetrumScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriquetrumScriptRule()); }
	iv_ruleTriquetrumScript=ruleTriquetrumScript
	{ $current=$iv_ruleTriquetrumScript.current; }
	EOF;

// Rule TriquetrumScript
ruleTriquetrumScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTriquetrumScriptAccess().getLibrariesLibraryParserRuleCall_0_0());
				}
				lv_libraries_0_0=ruleLibrary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriquetrumScriptRule());
					}
					add(
						$current,
						"libraries",
						lv_libraries_0_0,
						"org.eclipse.triquetrum.commands.Tqcl.Library");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTriquetrumScriptAccess().getCommandsCommandParserRuleCall_1_0());
				}
				lv_commands_1_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriquetrumScriptRule());
					}
					add(
						$current,
						"commands",
						lv_commands_1_0,
						"org.eclipse.triquetrum.commands.Tqcl.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCompositeCommand
entryRuleCompositeCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeCommandRule()); }
	iv_ruleCompositeCommand=ruleCompositeCommand
	{ $current=$iv_ruleCompositeCommand.current; }
	EOF;

// Rule CompositeCommand
ruleCompositeCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeCommandAccess().getStartGoIntoParserRuleCall_0_0());
				}
				lv_start_0_0=ruleGoInto
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeCommandRule());
					}
					set(
						$current,
						"start",
						lv_start_0_0,
						"org.eclipse.triquetrum.commands.Tqcl.GoInto");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeCommandAccess().getCommandsCommandParserRuleCall_1_0());
				}
				lv_commands_1_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeCommandRule());
					}
					add(
						$current,
						"commands",
						lv_commands_1_0,
						"org.eclipse.triquetrum.commands.Tqcl.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositeCommandAccess().getEndGoOutParserRuleCall_2_0_0());
					}
					lv_end_2_1=ruleGoOut
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositeCommandRule());
						}
						set(
							$current,
							"end",
							lv_end_2_1,
							"org.eclipse.triquetrum.commands.Tqcl.GoOut");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getCompositeCommandAccess().getEndGoTopParserRuleCall_2_0_1());
					}
					lv_end_2_2=ruleGoTop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositeCommandRule());
						}
						set(
							$current,
							"end",
							lv_end_2_2,
							"org.eclipse.triquetrum.commands.Tqcl.GoTop");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSimpleCommand
entryRuleSimpleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleCommandRule()); }
	iv_ruleSimpleCommand=ruleSimpleCommand
	{ $current=$iv_ruleSimpleCommand.current; }
	EOF;

// Rule SimpleCommand
ruleSimpleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSimpleCommandAccess().getInsertParserRuleCall_0_0());
			}
			this_Insert_0=ruleInsert
			{
				$current = $this_Insert_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getSimpleCommandAccess().getConnectParserRuleCall_0_1());
			}
			this_Connect_1=ruleConnect
			{
				$current = $this_Connect_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getSimpleCommandAccess().getSetParserRuleCall_0_2());
			}
			this_Set_2=ruleSet
			{
				$current = $this_Set_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getSimpleCommandAccess().getIncludeParserRuleCall_0_3());
			}
			this_Include_3=ruleInclude
			{
				$current = $this_Include_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getSimpleCommandAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getSimpleCommandParserRuleCall_0());
		}
		this_SimpleCommand_0=ruleSimpleCommand
		{
			$current = $this_SimpleCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCompositeCommandParserRuleCall_1());
		}
		this_CompositeCommand_1=ruleCompositeCommand
		{
			$current = $this_CompositeCommand_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	iv_ruleInclude=ruleInclude
	{ $current=$iv_ruleInclude.current; }
	EOF;

// Rule Include
ruleInclude returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='include'
		{
			newLeafNode(otherlv_0, grammarAccess.getIncludeAccess().getIncludeKeyword_0());
		}
		(
			(
				lv_filename_1_0=RULE_STRING
				{
					newLeafNode(lv_filename_1_0, grammarAccess.getIncludeAccess().getFilenameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIncludeRule());
					}
					setWithLastConsumed(
						$current,
						"filename",
						lv_filename_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getIncludeAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleLibrary
entryRuleLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLibraryRule()); }
	iv_ruleLibrary=ruleLibrary
	{ $current=$iv_ruleLibrary.current; }
	EOF;

// Rule Library
ruleLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='library'
		{
			newLeafNode(otherlv_0, grammarAccess.getLibraryAccess().getLibraryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLibraryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLibraryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getLibraryAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleInsert
entryRuleInsert returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	iv_ruleInsert=ruleInsert
	{ $current=$iv_ruleInsert.current; }
	EOF;

// Rule Insert
ruleInsert returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='insert'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertAccess().getInsertKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getCategoryCategoryEnumRuleCall_1_0());
				}
				lv_category_1_0=ruleCategory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					set(
						$current,
						"category",
						lv_category_1_0,
						"org.eclipse.triquetrum.commands.Tqcl.Category");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_entityClass_2_0=RULE_ENTITY_CLASS
				{
					newLeafNode(lv_entityClass_2_0, grammarAccess.getInsertAccess().getEntityClassENTITY_CLASSTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInsertRule());
					}
					setWithLastConsumed(
						$current,
						"entityClass",
						lv_entityClass_2_0,
						"org.eclipse.triquetrum.commands.Tqcl.ENTITY_CLASS");
				}
			)
		)
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getInsertAccess().getAsKeyword_3());
		}
		(
			(
				lv_name_4_0=RULE_STRING
				{
					newLeafNode(lv_name_4_0, grammarAccess.getInsertAccess().getNameSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInsertRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_5='with'
			{
				newLeafNode(otherlv_5, grammarAccess.getInsertAccess().getWithKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInsertAccess().getParametersParameterParserRuleCall_5_1_0());
					}
					lv_parameters_6_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInsertRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_6_0,
							"org.eclipse.triquetrum.commands.Tqcl.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getInsertAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInsertAccess().getParametersParameterParserRuleCall_5_2_1_0());
						}
						lv_parameters_8_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInsertRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_8_0,
								"org.eclipse.triquetrum.commands.Tqcl.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleSet
entryRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	iv_ruleSet=ruleSet
	{ $current=$iv_ruleSet.current; }
	EOF;

// Rule Set
ruleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetAccess().getSetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetAccess().getParamParameterParserRuleCall_1_0());
				}
				lv_param_1_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetRule());
					}
					set(
						$current,
						"param",
						lv_param_1_0,
						"org.eclipse.triquetrum.commands.Tqcl.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConnect
entryRuleConnect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectRule()); }
	iv_ruleConnect=ruleConnect
	{ $current=$iv_ruleConnect.current; }
	EOF;

// Rule Connect
ruleConnect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='connect'
		{
			newLeafNode(otherlv_0, grammarAccess.getConnectAccess().getConnectKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectAccess().getFromConnectionPortParserRuleCall_1_0());
				}
				lv_from_1_0=ruleConnectionPort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectRule());
					}
					add(
						$current,
						"from",
						lv_from_1_0,
						"org.eclipse.triquetrum.commands.Tqcl.ConnectionPort");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getConnectAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConnectAccess().getFromConnectionPortParserRuleCall_2_1_0());
					}
					lv_from_3_0=ruleConnectionPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConnectRule());
						}
						add(
							$current,
							"from",
							lv_from_3_0,
							"org.eclipse.triquetrum.commands.Tqcl.ConnectionPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getConnectAccess().getToKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectAccess().getToConnectionPortParserRuleCall_4_0());
				}
				lv_to_5_0=ruleConnectionPort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectRule());
					}
					add(
						$current,
						"to",
						lv_to_5_0,
						"org.eclipse.triquetrum.commands.Tqcl.ConnectionPort");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getConnectAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConnectAccess().getToConnectionPortParserRuleCall_5_1_0());
					}
					lv_to_7_0=ruleConnectionPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConnectRule());
						}
						add(
							$current,
							"to",
							lv_to_7_0,
							"org.eclipse.triquetrum.commands.Tqcl.ConnectionPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConnectionPort
entryRuleConnectionPort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectionPortRule()); }
	iv_ruleConnectionPort=ruleConnectionPort
	{ $current=$iv_ruleConnectionPort.current; }
	EOF;

// Rule ConnectionPort
ruleConnectionPort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionPortRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getConnectionPortAccess().getActorInsertCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getConnectionPortAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectionPortAccess().getPortNamedObjParserRuleCall_2_0());
				}
				lv_port_2_0=ruleNamedObj
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectionPortRule());
					}
					set(
						$current,
						"port",
						lv_port_2_0,
						"org.eclipse.triquetrum.commands.Tqcl.NamedObj");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGoInto
entryRuleGoInto returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoIntoRule()); }
	iv_ruleGoInto=ruleGoInto
	{ $current=$iv_ruleGoInto.current; }
	EOF;

// Rule GoInto
ruleGoInto returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='go'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoIntoAccess().getGoKeyword_0());
		}
		(
			(
				lv_direction_1_0='into'
				{
					newLeafNode(lv_direction_1_0, grammarAccess.getGoIntoAccess().getDirectionIntoKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGoIntoRule());
					}
					setWithLastConsumed($current, "direction", lv_direction_1_0, "into");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGoIntoRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getGoIntoAccess().getActorInsertCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleGoOut
entryRuleGoOut returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoOutRule()); }
	iv_ruleGoOut=ruleGoOut
	{ $current=$iv_ruleGoOut.current; }
	EOF;

// Rule GoOut
ruleGoOut returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='go'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoOutAccess().getGoKeyword_0());
		}
		(
			(
				lv_direction_1_0='out'
				{
					newLeafNode(lv_direction_1_0, grammarAccess.getGoOutAccess().getDirectionOutKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGoOutRule());
					}
					setWithLastConsumed($current, "direction", lv_direction_1_0, "out");
				}
			)
		)
	)
;

// Entry rule entryRuleGoTop
entryRuleGoTop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoTopRule()); }
	iv_ruleGoTop=ruleGoTop
	{ $current=$iv_ruleGoTop.current; }
	EOF;

// Rule GoTop
ruleGoTop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='go'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoTopAccess().getGoKeyword_0());
		}
		(
			(
				lv_direction_1_0='top'
				{
					newLeafNode(lv_direction_1_0, grammarAccess.getGoTopAccess().getDirectionTopKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGoTopRule());
					}
					setWithLastConsumed($current, "direction", lv_direction_1_0, "top");
				}
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getIdParameter_idParserRuleCall_0_0());
				}
				lv_id_0_0=ruleParameter_id
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.triquetrum.commands.Tqcl.Parameter_id");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getParameterAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleParameter_id
entryRuleParameter_id returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameter_idRule()); }
	iv_ruleParameter_id=ruleParameter_id
	{ $current=$iv_ruleParameter_id.current.getText(); }
	EOF;

// Rule Parameter_id
ruleParameter_id returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_PARAMETER_NAME_0=RULE_PARAMETER_NAME
		{
			$current.merge(this_PARAMETER_NAME_0);
		}
		{
			newLeafNode(this_PARAMETER_NAME_0, grammarAccess.getParameter_idAccess().getPARAMETER_NAMETerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getParameter_idAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleNamedObj
entryRuleNamedObj returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNamedObjRule()); }
	iv_ruleNamedObj=ruleNamedObj
	{ $current=$iv_ruleNamedObj.current.getText(); }
	EOF;

// Rule NamedObj
ruleNamedObj returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getNamedObjAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getNamedObjAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Rule Category
ruleCategory returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='actor'
			{
				$current = grammarAccess.getCategoryAccess().getActorEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCategoryAccess().getActorEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='parameter'
			{
				$current = grammarAccess.getCategoryAccess().getParameterEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCategoryAccess().getParameterEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='port'
			{
				$current = grammarAccess.getCategoryAccess().getPortEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCategoryAccess().getPortEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='director'
			{
				$current = grammarAccess.getCategoryAccess().getDirectorEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCategoryAccess().getDirectorEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_PARAMETER_NAME : '$' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ENTITY_CLASS : '<' ( options {greedy=false;} : . )*'>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
