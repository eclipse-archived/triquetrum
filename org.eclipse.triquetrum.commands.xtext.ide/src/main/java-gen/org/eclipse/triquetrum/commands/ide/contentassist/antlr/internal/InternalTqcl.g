/*******************************************************************************
 * Copyright (c)  2016 Totaro Rodolfo
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * generated by Xtext 2.10.0	
 *
 * Contributors:
 *    Rodolfo Totaro - initial API and implementation and/or initial documentation
 *******************************************************************************/
grammar InternalTqcl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.triquetrum.commands.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.triquetrum.commands.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.triquetrum.commands.services.TqclGrammarAccess;

}
@parser::members {
	private TqclGrammarAccess grammarAccess;

	public void setGrammarAccess(TqclGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTriquetrumScript
entryRuleTriquetrumScript
:
{ before(grammarAccess.getTriquetrumScriptRule()); }
	 ruleTriquetrumScript
{ after(grammarAccess.getTriquetrumScriptRule()); } 
	 EOF 
;

// Rule TriquetrumScript
ruleTriquetrumScript 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriquetrumScriptAccess().getGroup()); }
		(rule__TriquetrumScript__Group__0)
		{ after(grammarAccess.getTriquetrumScriptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompositeCommand
entryRuleCompositeCommand
:
{ before(grammarAccess.getCompositeCommandRule()); }
	 ruleCompositeCommand
{ after(grammarAccess.getCompositeCommandRule()); } 
	 EOF 
;

// Rule CompositeCommand
ruleCompositeCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositeCommandAccess().getGroup()); }
		(rule__CompositeCommand__Group__0)
		{ after(grammarAccess.getCompositeCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleCommand
entryRuleSimpleCommand
:
{ before(grammarAccess.getSimpleCommandRule()); }
	 ruleSimpleCommand
{ after(grammarAccess.getSimpleCommandRule()); } 
	 EOF 
;

// Rule SimpleCommand
ruleSimpleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getGroup()); }
		(rule__SimpleCommand__Group__0)
		{ after(grammarAccess.getSimpleCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInclude
entryRuleInclude
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncludeAccess().getGroup()); }
		(rule__Include__Group__0)
		{ after(grammarAccess.getIncludeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLibrary
entryRuleLibrary
:
{ before(grammarAccess.getLibraryRule()); }
	 ruleLibrary
{ after(grammarAccess.getLibraryRule()); } 
	 EOF 
;

// Rule Library
ruleLibrary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLibraryAccess().getGroup()); }
		(rule__Library__Group__0)
		{ after(grammarAccess.getLibraryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsert
entryRuleInsert
:
{ before(grammarAccess.getInsertRule()); }
	 ruleInsert
{ after(grammarAccess.getInsertRule()); } 
	 EOF 
;

// Rule Insert
ruleInsert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertAccess().getGroup()); }
		(rule__Insert__Group__0)
		{ after(grammarAccess.getInsertAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSet
entryRuleSet
:
{ before(grammarAccess.getSetRule()); }
	 ruleSet
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule Set
ruleSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetAccess().getGroup()); }
		(rule__Set__Group__0)
		{ after(grammarAccess.getSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnect
entryRuleConnect
:
{ before(grammarAccess.getConnectRule()); }
	 ruleConnect
{ after(grammarAccess.getConnectRule()); } 
	 EOF 
;

// Rule Connect
ruleConnect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectAccess().getGroup()); }
		(rule__Connect__Group__0)
		{ after(grammarAccess.getConnectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnectionPort
entryRuleConnectionPort
:
{ before(grammarAccess.getConnectionPortRule()); }
	 ruleConnectionPort
{ after(grammarAccess.getConnectionPortRule()); } 
	 EOF 
;

// Rule ConnectionPort
ruleConnectionPort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectionPortAccess().getGroup()); }
		(rule__ConnectionPort__Group__0)
		{ after(grammarAccess.getConnectionPortAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoInto
entryRuleGoInto
:
{ before(grammarAccess.getGoIntoRule()); }
	 ruleGoInto
{ after(grammarAccess.getGoIntoRule()); } 
	 EOF 
;

// Rule GoInto
ruleGoInto 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoIntoAccess().getGroup()); }
		(rule__GoInto__Group__0)
		{ after(grammarAccess.getGoIntoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoOut
entryRuleGoOut
:
{ before(grammarAccess.getGoOutRule()); }
	 ruleGoOut
{ after(grammarAccess.getGoOutRule()); } 
	 EOF 
;

// Rule GoOut
ruleGoOut 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoOutAccess().getGroup()); }
		(rule__GoOut__Group__0)
		{ after(grammarAccess.getGoOutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoTop
entryRuleGoTop
:
{ before(grammarAccess.getGoTopRule()); }
	 ruleGoTop
{ after(grammarAccess.getGoTopRule()); } 
	 EOF 
;

// Rule GoTop
ruleGoTop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoTopAccess().getGroup()); }
		(rule__GoTop__Group__0)
		{ after(grammarAccess.getGoTopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter_id
entryRuleParameter_id
:
{ before(grammarAccess.getParameter_idRule()); }
	 ruleParameter_id
{ after(grammarAccess.getParameter_idRule()); } 
	 EOF 
;

// Rule Parameter_id
ruleParameter_id 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameter_idAccess().getAlternatives()); }
		(rule__Parameter_id__Alternatives)
		{ after(grammarAccess.getParameter_idAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamedObj
entryRuleNamedObj
:
{ before(grammarAccess.getNamedObjRule()); }
	 ruleNamedObj
{ after(grammarAccess.getNamedObjRule()); } 
	 EOF 
;

// Rule NamedObj
ruleNamedObj 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamedObjAccess().getAlternatives()); }
		(rule__NamedObj__Alternatives)
		{ after(grammarAccess.getNamedObjAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Category
ruleCategory
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategoryAccess().getAlternatives()); }
		(rule__Category__Alternatives)
		{ after(grammarAccess.getCategoryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__EndAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeCommandAccess().getEndGoOutParserRuleCall_2_0_0()); }
		ruleGoOut
		{ after(grammarAccess.getCompositeCommandAccess().getEndGoOutParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompositeCommandAccess().getEndGoTopParserRuleCall_2_0_1()); }
		ruleGoTop
		{ after(grammarAccess.getCompositeCommandAccess().getEndGoTopParserRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleCommandAccess().getInsertParserRuleCall_0_0()); }
		ruleInsert
		{ after(grammarAccess.getSimpleCommandAccess().getInsertParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleCommandAccess().getConnectParserRuleCall_0_1()); }
		ruleConnect
		{ after(grammarAccess.getSimpleCommandAccess().getConnectParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleCommandAccess().getSetParserRuleCall_0_2()); }
		ruleSet
		{ after(grammarAccess.getSimpleCommandAccess().getSetParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleCommandAccess().getIncludeParserRuleCall_0_3()); }
		ruleInclude
		{ after(grammarAccess.getSimpleCommandAccess().getIncludeParserRuleCall_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getSimpleCommandParserRuleCall_0()); }
		ruleSimpleCommand
		{ after(grammarAccess.getCommandAccess().getSimpleCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCompositeCommandParserRuleCall_1()); }
		ruleCompositeCommand
		{ after(grammarAccess.getCommandAccess().getCompositeCommandParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter_id__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameter_idAccess().getPARAMETER_NAMETerminalRuleCall_0()); }
		RULE_PARAMETER_NAME
		{ after(grammarAccess.getParameter_idAccess().getPARAMETER_NAMETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameter_idAccess().getSTRINGTerminalRuleCall_1()); }
		RULE_STRING
		{ after(grammarAccess.getParameter_idAccess().getSTRINGTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedObj__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedObjAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getNamedObjAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNamedObjAccess().getSTRINGTerminalRuleCall_1()); }
		RULE_STRING
		{ after(grammarAccess.getNamedObjAccess().getSTRINGTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategoryAccess().getActorEnumLiteralDeclaration_0()); }
		('actor')
		{ after(grammarAccess.getCategoryAccess().getActorEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCategoryAccess().getParameterEnumLiteralDeclaration_1()); }
		('parameter')
		{ after(grammarAccess.getCategoryAccess().getParameterEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCategoryAccess().getPortEnumLiteralDeclaration_2()); }
		('port')
		{ after(grammarAccess.getCategoryAccess().getPortEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getCategoryAccess().getDirectorEnumLiteralDeclaration_3()); }
		('director')
		{ after(grammarAccess.getCategoryAccess().getDirectorEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriquetrumScript__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriquetrumScript__Group__0__Impl
	rule__TriquetrumScript__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TriquetrumScript__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriquetrumScriptAccess().getLibrariesAssignment_0()); }
	(rule__TriquetrumScript__LibrariesAssignment_0)*
	{ after(grammarAccess.getTriquetrumScriptAccess().getLibrariesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriquetrumScript__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriquetrumScript__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TriquetrumScript__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriquetrumScriptAccess().getCommandsAssignment_1()); }
	(rule__TriquetrumScript__CommandsAssignment_1)*
	{ after(grammarAccess.getTriquetrumScriptAccess().getCommandsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCommand__Group__0__Impl
	rule__CompositeCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeCommandAccess().getStartAssignment_0()); }
	(rule__CompositeCommand__StartAssignment_0)
	{ after(grammarAccess.getCompositeCommandAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCommand__Group__1__Impl
	rule__CompositeCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeCommandAccess().getCommandsAssignment_1()); }
	(rule__CompositeCommand__CommandsAssignment_1)*
	{ after(grammarAccess.getCompositeCommandAccess().getCommandsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeCommandAccess().getEndAssignment_2()); }
	(rule__CompositeCommand__EndAssignment_2)
	{ after(grammarAccess.getCompositeCommandAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleCommand__Group__0__Impl
	rule__SimpleCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleCommandAccess().getAlternatives_0()); }
	(rule__SimpleCommand__Alternatives_0)
	{ after(grammarAccess.getSimpleCommandAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleCommand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleCommandAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getSimpleCommandAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
	'include'
	{ after(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__1__Impl
	rule__Include__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getFilenameAssignment_1()); }
	(rule__Include__FilenameAssignment_1)
	{ after(grammarAccess.getIncludeAccess().getFilenameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getIncludeAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Library__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Library__Group__0__Impl
	rule__Library__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLibraryAccess().getLibraryKeyword_0()); }
	'library'
	{ after(grammarAccess.getLibraryAccess().getLibraryKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Library__Group__1__Impl
	rule__Library__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLibraryAccess().getNameAssignment_1()); }
	(rule__Library__NameAssignment_1)
	{ after(grammarAccess.getLibraryAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Library__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLibraryAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getLibraryAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__0__Impl
	rule__Insert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getInsertKeyword_0()); }
	'insert'
	{ after(grammarAccess.getInsertAccess().getInsertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__1__Impl
	rule__Insert__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getCategoryAssignment_1()); }
	(rule__Insert__CategoryAssignment_1)?
	{ after(grammarAccess.getInsertAccess().getCategoryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__2__Impl
	rule__Insert__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getEntityClassAssignment_2()); }
	(rule__Insert__EntityClassAssignment_2)
	{ after(grammarAccess.getInsertAccess().getEntityClassAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__3__Impl
	rule__Insert__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getAsKeyword_3()); }
	'as'
	{ after(grammarAccess.getInsertAccess().getAsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__4__Impl
	rule__Insert__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getNameAssignment_4()); }
	(rule__Insert__NameAssignment_4)
	{ after(grammarAccess.getInsertAccess().getNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getGroup_5()); }
	(rule__Insert__Group_5__0)?
	{ after(grammarAccess.getInsertAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group_5__0__Impl
	rule__Insert__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getWithKeyword_5_0()); }
	'with'
	{ after(grammarAccess.getInsertAccess().getWithKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group_5__1__Impl
	rule__Insert__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getParametersAssignment_5_1()); }
	(rule__Insert__ParametersAssignment_5_1)
	{ after(grammarAccess.getInsertAccess().getParametersAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getGroup_5_2()); }
	(rule__Insert__Group_5_2__0)*
	{ after(grammarAccess.getInsertAccess().getGroup_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group_5_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group_5_2__0__Impl
	rule__Insert__Group_5_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_5_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getCommaKeyword_5_2_0()); }
	','
	{ after(grammarAccess.getInsertAccess().getCommaKeyword_5_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_5_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group_5_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_5_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getParametersAssignment_5_2_1()); }
	(rule__Insert__ParametersAssignment_5_2_1)
	{ after(grammarAccess.getInsertAccess().getParametersAssignment_5_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getSetKeyword_0()); }
	'set'
	{ after(grammarAccess.getSetAccess().getSetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getParamAssignment_1()); }
	(rule__Set__ParamAssignment_1)
	{ after(grammarAccess.getSetAccess().getParamAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Connect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__0__Impl
	rule__Connect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getConnectKeyword_0()); }
	'connect'
	{ after(grammarAccess.getConnectAccess().getConnectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__1__Impl
	rule__Connect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getFromAssignment_1()); }
	(rule__Connect__FromAssignment_1)
	{ after(grammarAccess.getConnectAccess().getFromAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__2__Impl
	rule__Connect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getGroup_2()); }
	(rule__Connect__Group_2__0)*
	{ after(grammarAccess.getConnectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__3__Impl
	rule__Connect__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getConnectAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__4__Impl
	rule__Connect__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getToAssignment_4()); }
	(rule__Connect__ToAssignment_4)
	{ after(grammarAccess.getConnectAccess().getToAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getGroup_5()); }
	(rule__Connect__Group_5__0)*
	{ after(grammarAccess.getConnectAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Connect__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group_2__0__Impl
	rule__Connect__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getConnectAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getFromAssignment_2_1()); }
	(rule__Connect__FromAssignment_2_1)
	{ after(grammarAccess.getConnectAccess().getFromAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Connect__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group_5__0__Impl
	rule__Connect__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getCommaKeyword_5_0()); }
	','
	{ after(grammarAccess.getConnectAccess().getCommaKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connect__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectAccess().getToAssignment_5_1()); }
	(rule__Connect__ToAssignment_5_1)
	{ after(grammarAccess.getConnectAccess().getToAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConnectionPort__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectionPort__Group__0__Impl
	rule__ConnectionPort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectionPort__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionPortAccess().getActorAssignment_0()); }
	(rule__ConnectionPort__ActorAssignment_0)
	{ after(grammarAccess.getConnectionPortAccess().getActorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectionPort__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectionPort__Group__1__Impl
	rule__ConnectionPort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectionPort__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionPortAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getConnectionPortAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectionPort__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectionPort__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectionPort__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionPortAccess().getPortAssignment_2()); }
	(rule__ConnectionPort__PortAssignment_2)
	{ after(grammarAccess.getConnectionPortAccess().getPortAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoInto__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoInto__Group__0__Impl
	rule__GoInto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoInto__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoIntoAccess().getGoKeyword_0()); }
	'go'
	{ after(grammarAccess.getGoIntoAccess().getGoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoInto__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoInto__Group__1__Impl
	rule__GoInto__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoInto__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoIntoAccess().getDirectionAssignment_1()); }
	(rule__GoInto__DirectionAssignment_1)
	{ after(grammarAccess.getGoIntoAccess().getDirectionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoInto__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoInto__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoInto__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoIntoAccess().getActorAssignment_2()); }
	(rule__GoInto__ActorAssignment_2)
	{ after(grammarAccess.getGoIntoAccess().getActorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoOut__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoOut__Group__0__Impl
	rule__GoOut__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOut__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoOutAccess().getGoKeyword_0()); }
	'go'
	{ after(grammarAccess.getGoOutAccess().getGoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOut__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoOut__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOut__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoOutAccess().getDirectionAssignment_1()); }
	(rule__GoOut__DirectionAssignment_1)
	{ after(grammarAccess.getGoOutAccess().getDirectionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoTop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoTop__Group__0__Impl
	rule__GoTop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoTopAccess().getGoKeyword_0()); }
	'go'
	{ after(grammarAccess.getGoTopAccess().getGoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoTop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoTopAccess().getDirectionAssignment_1()); }
	(rule__GoTop__DirectionAssignment_1)
	{ after(grammarAccess.getGoTopAccess().getDirectionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getIdAssignment_0()); }
	(rule__Parameter__IdAssignment_0)
	{ after(grammarAccess.getParameterAccess().getIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getParameterAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getValueAssignment_2()); }
	(rule__Parameter__ValueAssignment_2)
	{ after(grammarAccess.getParameterAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TriquetrumScript__LibrariesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriquetrumScriptAccess().getLibrariesLibraryParserRuleCall_0_0()); }
		ruleLibrary
		{ after(grammarAccess.getTriquetrumScriptAccess().getLibrariesLibraryParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriquetrumScript__CommandsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriquetrumScriptAccess().getCommandsCommandParserRuleCall_1_0()); }
		ruleCommand
		{ after(grammarAccess.getTriquetrumScriptAccess().getCommandsCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeCommandAccess().getStartGoIntoParserRuleCall_0_0()); }
		ruleGoInto
		{ after(grammarAccess.getCompositeCommandAccess().getStartGoIntoParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__CommandsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeCommandAccess().getCommandsCommandParserRuleCall_1_0()); }
		ruleCommand
		{ after(grammarAccess.getCompositeCommandAccess().getCommandsCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCommand__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeCommandAccess().getEndAlternatives_2_0()); }
		(rule__CompositeCommand__EndAlternatives_2_0)
		{ after(grammarAccess.getCompositeCommandAccess().getEndAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__FilenameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncludeAccess().getFilenameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIncludeAccess().getFilenameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLibraryAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLibraryAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__CategoryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getCategoryCategoryEnumRuleCall_1_0()); }
		ruleCategory
		{ after(grammarAccess.getInsertAccess().getCategoryCategoryEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__EntityClassAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getEntityClassENTITY_CLASSTerminalRuleCall_2_0()); }
		RULE_ENTITY_CLASS
		{ after(grammarAccess.getInsertAccess().getEntityClassENTITY_CLASSTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__NameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getNameSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getInsertAccess().getNameSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__ParametersAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getParametersParameterParserRuleCall_5_1_0()); }
		ruleParameter
		{ after(grammarAccess.getInsertAccess().getParametersParameterParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__ParametersAssignment_5_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getParametersParameterParserRuleCall_5_2_1_0()); }
		ruleParameter
		{ after(grammarAccess.getInsertAccess().getParametersParameterParserRuleCall_5_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__ParamAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetAccess().getParamParameterParserRuleCall_1_0()); }
		ruleParameter
		{ after(grammarAccess.getSetAccess().getParamParameterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__FromAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectAccess().getFromConnectionPortParserRuleCall_1_0()); }
		ruleConnectionPort
		{ after(grammarAccess.getConnectAccess().getFromConnectionPortParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__FromAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectAccess().getFromConnectionPortParserRuleCall_2_1_0()); }
		ruleConnectionPort
		{ after(grammarAccess.getConnectAccess().getFromConnectionPortParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__ToAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectAccess().getToConnectionPortParserRuleCall_4_0()); }
		ruleConnectionPort
		{ after(grammarAccess.getConnectAccess().getToConnectionPortParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connect__ToAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectAccess().getToConnectionPortParserRuleCall_5_1_0()); }
		ruleConnectionPort
		{ after(grammarAccess.getConnectAccess().getToConnectionPortParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectionPort__ActorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionPortAccess().getActorInsertCrossReference_0_0()); }
		(
			{ before(grammarAccess.getConnectionPortAccess().getActorInsertIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConnectionPortAccess().getActorInsertIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getConnectionPortAccess().getActorInsertCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectionPort__PortAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionPortAccess().getPortNamedObjParserRuleCall_2_0()); }
		ruleNamedObj
		{ after(grammarAccess.getConnectionPortAccess().getPortNamedObjParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoInto__DirectionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoIntoAccess().getDirectionIntoKeyword_1_0()); }
		(
			{ before(grammarAccess.getGoIntoAccess().getDirectionIntoKeyword_1_0()); }
			'into'
			{ after(grammarAccess.getGoIntoAccess().getDirectionIntoKeyword_1_0()); }
		)
		{ after(grammarAccess.getGoIntoAccess().getDirectionIntoKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoInto__ActorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoIntoAccess().getActorInsertCrossReference_2_0()); }
		(
			{ before(grammarAccess.getGoIntoAccess().getActorInsertIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGoIntoAccess().getActorInsertIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getGoIntoAccess().getActorInsertCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOut__DirectionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoOutAccess().getDirectionOutKeyword_1_0()); }
		(
			{ before(grammarAccess.getGoOutAccess().getDirectionOutKeyword_1_0()); }
			'out'
			{ after(grammarAccess.getGoOutAccess().getDirectionOutKeyword_1_0()); }
		)
		{ after(grammarAccess.getGoOutAccess().getDirectionOutKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTop__DirectionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoTopAccess().getDirectionTopKeyword_1_0()); }
		(
			{ before(grammarAccess.getGoTopAccess().getDirectionTopKeyword_1_0()); }
			'top'
			{ after(grammarAccess.getGoTopAccess().getDirectionTopKeyword_1_0()); }
		)
		{ after(grammarAccess.getGoTopAccess().getDirectionTopKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIdParameter_idParserRuleCall_0_0()); }
		ruleParameter_id
		{ after(grammarAccess.getParameterAccess().getIdParameter_idParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getParameterAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_PARAMETER_NAME : '$' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ENTITY_CLASS : '<' ( options {greedy=false;} : . )*'>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
